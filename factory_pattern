üåü What is the Factory Design Pattern?
The Factory Design Pattern is a creational design pattern that creates objects without exposing the creation logic to the client. Instead, it uses a factory method to create the object.

üëâ In simple words:

	‚Ä¢	You don‚Äôt create objects directly.
	‚Ä¢	You ask the factory to create it for you.
	‚Ä¢	The factory decides which class to instantiate.
	‚Ä¢	The factory returns an object.

üéØ Why Use the Factory Pattern?
To hide the complexity of object creation.

	‚Ä¢	Centralise object creation logic
	‚Ä¢	Make the system easy to maintain and expand
	‚Ä¢	Decouple client code from specific classes


üß© Real-World Analogy:
Imagine a Car Factory.
You just say "I want a car", and the factory will give you a Sedan, SUV, or Truck based on your request.

You don‚Äôt care about:

	‚Ä¢	How the car is built
	‚Ä¢	What exact parts are used
	‚Ä¢	How the engine is assembled

Similarly, in software, the client asks for an object, and the Factory handles the construction.

üèóÔ∏è Structure of Factory Pattern
	‚Ä¢	Product: The common interface or abstract class.
	‚Ä¢	ConcreteProduct: The actual classes implementing the Product.
	‚Ä¢	Creator/Factory: The class with a method to create objects of ConcreteProduct.

üî• Advantages of Factory Pattern:
	‚Ä¢	Reduces coupling between classes and their clients.
	‚Ä¢	Single Responsibility Principle: Factory class handles the instantiation.
	‚Ä¢	Easy to introduce new types without changing much client code.

‚ö†Ô∏è Disadvantages:
	‚Ä¢	Code can become more complex with too many factories.
	‚Ä¢	Might need a lot of factories if not managed properly.
	‚Ä¢	Solution: Abstract Factory Pattern.

üöÄ When to Use Factory Pattern?
	‚Ä¢	Use the Factory Method pattern when object creation is complex or depends on conditions.
	‚Ä¢	Use the Factory Method pattern to decouple object creation from usage.
	‚Ä¢	Use the Factory Method pattern to follow the Open/Closed Principle (open for extension, closed for modification).

üôã Some real-world interview questions based on the Factory Design Pattern:

1. What is the Factory Design Pattern? Why is it used?
   The Factory Pattern is a creational pattern used to create objects without exposing the creation logic to the client.
   It provides a factory method that decides which subclass to instantiate.
   It improves code maintainability and decouples object creation from usage.

2. What is the main problem that the Factory Pattern solves?
   It solves the problem of tight coupling between the code that needs objects and the classes of those objects.
   It centralizes object creation and makes adding new types easier without modifying client code.

3. Can you give a real-world example of the Factory Pattern?
   Vehicle Factory that produces different types of vehicles (Car, Bike, Truck) based on user input. The client just asks the factory for a vehicle and uses it without worrying about how it is created.

4. How is the Factory Pattern different from simply using a constructor (new)?
  Using new couples your code to a specific class.
  Factory Pattern abstracts this and allows creation of new objects without needing the client to know their exact class names, making the system flexible and maintainable.

5. How would you modify a Factory if you want to add a new product type without changing the existing code much?
   Use Open/Closed Principle ‚Äî extend the Factory to support new product types through polymorphism or registration mechanisms (e.g., using a dictionary or reflection), without modifying the existing methods heavily.

6. What are the potential drawbacks of the Factory Pattern?
	‚Ä¢	Code can become more complicated if there are too many product types.
	‚Ä¢	It can violate Single Responsibility Principle if the factory grows too large.
	‚Ä¢	Managing parameters for different types can become messy if not handled carefully.

7. How would you design a Factory when the object creation logic is very complex (e.g., requires different parameters for different products)?
   Use a Factory Method Pattern where each subclass of the factory is responsible for creating a specific product.
   Alternatively, use Abstract Factory if multiple families of related products are involved.

8. How can you implement a Factory without using if-else or switch-case?
	‚Ä¢	Register each type dynamically in a Dictionary<string, Func<IProduct>>.
	‚Ä¢	Use Reflection to instantiate classes based on names.
	‚Ä¢	Use a Dependency Injection container to resolve the objects.

9. How does the Factory Pattern fit into SOLID principles?
	‚Ä¢	Single Responsibility Principle:
	‚Ä¢	Factory handles object creation
	‚Ä¢	Product classes handle their own behaviour
	‚Ä¢	Open/Closed Principle:
	‚Ä¢	New types can be introduced with minimal changes
	‚Ä¢	Dependency Inversion Principle:
	‚Ä¢	Clients depend on abstractions (IVehicle) rather than concrete classes (Car, Bike)


